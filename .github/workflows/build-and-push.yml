name: Deploy Client CMS

on:
  repository_dispatch:
    types: [deploy-site]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_PASS: ${{ secrets.SERVER_PASS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug repo files
        run: ls -R

      - name: Sanitize titreSite for Docker tag
        run: |
          SAFE_TITRE_SITE=$(echo "${{ github.event.client_payload.titreSite }}" | tr '[:upper:]' '[:lower:]' | sed -E 's/ +/-/g')
          echo "SAFE_TITRE_SITE=$SAFE_TITRE_SITE" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build --no-cache \
            --build-arg REACT_APP_PRIMARY="${{ github.event.client_payload.primary }}" \
            --build-arg REACT_APP_SECONDARY="${{ github.event.client_payload.secondary }}" \
            --build-arg REACT_APP_TITRE_SITE="${{ github.event.client_payload.titreSite }}" \
            --build-arg REACT_APP_USER="${{ github.event.client_payload.user }}" \
            -t $DOCKERHUB_USERNAME/client-cms-$SAFE_TITRE_SITE .

      - name: Log in to Docker Hub
        run: echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin

      - name: Push Docker image
        run: docker push $DOCKERHUB_USERNAME/client-cms-$SAFE_TITRE_SITE

      - name: Prepare server (install docker + compose if needed)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ env.SERVER_PASS }}
          script: |
            set -e
            sudo apt update -y && sudo apt upgrade -y
            if ! command -v docker &> /dev/null
            then
              curl -fsSL https://get.docker.com | sh
            fi
            if ! command -v docker-compose &> /dev/null
            then
              sudo apt install -y docker-compose
            fi
            mkdir -p /home/${{ env.SERVER_USER }}/app

      - name: Copy compose files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ env.SERVER_PASS }}
          source: deploy/*
          target: /home/${{ env.SERVER_USER }}/app/

      - name: Deploy with docker-compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ env.SERVER_PASS }}
          script: |
            set -e
            cd /home/${{ env.SERVER_USER }}/app/deploy

            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
            echo "SAFE_TITRE_SITE=${{ env.SAFE_TITRE_SITE }}" >> .env
      
            echo "🧹 Nettoyage complet Docker..."
            docker stop $(docker ps -a -q) || true
            docker rm -f $(docker ps -aq) || true
            docker system prune -af || true
            docker volume prune -f || true
            docker network prune -f || true

            echo "⬇️ Pull des nouvelles images..."
            docker-compose pull

#            echo "🚀 Lancement du client..."
#            docker run -d -p 80:8080 --name client-cms-${{ env.SAFE_TITRE_SITE }} ${{ env.DOCKERHUB_USERNAME }}/client-cms-${{ env.SAFE_TITRE_SITE }}
            
            echo "🚀 Lancement du monitoring..."
            docker-compose up -d
